pipeline {
  agent any

  stages {
    stage('Unit Tests - Backend') {
      agent {
        docker {
          image 'snakee/golang-junit:1.21'
          reuseNode true
        }
      }
      environment {
        XDG_CACHE_HOME = "${WORKSPACE}/.gocache"
        GOCACHE        = "${WORKSPACE}/.gocache/go-build"
        GOMODCACHE     = "${WORKSPACE}/.gocache/mod"
      }
      steps {
        dir('bugtracker-backend') {
          sh '''
            set -eux
            mkdir -p "$XDG_CACHE_HOME" "$GOCACHE" "$GOMODCACHE"
            go env
            go test -v ./...
            go test -v ./... 2>&1 | go-junit-report > test-results.xml

            # Generate Coverage report
            go test -coverprofile coverage.out -covermode=atomic ./...
            go tool cover -html=coverage.out -o coverage.html

            mkdir -p reports
            mv coverage.html reports/
          '''
        }
      }
      post {
        always{
          junit 'bugtracker-backend/test-results.xml'
          publishHTML target:[
            reportDir: 'bugtracker-backend/reports'
            reportFiles: 'coverage.html'
            reportName: 'Backend Coverage Report'
          ]
        }
      }
    }

    stage('Unit Test - Frontend') {
      agent {
        docker {
          image 'node:20-alpine'
          reuseNode true
        }
      }
      environment {
        CI = 'true'     
        TZ = 'UTC'      
      }
      steps {
        dir('bugtracker-frontend') {
          sh '''
            set -eux
            npm ci
            # если в проекте есть скрипт test, этого достаточно.
            # чтобы избежать зависания в watch-режиме, CI=true уже задан.
            npm test -- --runInBand
          '''
        }
      }
      post {
        always {
          junit 'bugtracker-frontend/test-results.xml'
        }
      }
    }
  }
}
