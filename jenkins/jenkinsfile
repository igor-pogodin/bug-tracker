pipeline {
  agent any

  environment {
    XDG_CACHE_HOME = "${WORKSPACE}/.gocache"
    GOCACHE        = "${WORKSPACE}/.gocache/go-build"
    //GOMODCACHE     = "${WORKSPACE}/.gocache/mod"  optional
  }

  stages {
    stage('Unit Tests - Backend') {
      steps {
        script {
          docker.image('snakee/golang-junit:1.21').inside(
            "-e XDG_CACHE_HOME=${env.XDG_CACHE_HOME} -e GOCACHE=${env.GOCACHE} -e GOMODCACHE=${env.GOMODCACHE}"
          ) {
            dir('bugtracker-backend') {
              sh '''
                mkdir -p "$XDG_CACHE_HOME" "$GOCACHE" "$GOMODCACHE"
                go env
                go test -v ./...
              '''
            }
          }
        }
      }
    }

    stage('Unit Test - Frontend') {
      when { expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') ||
            agent {
                docker {
                    image 'node:20-alpine'
                    reuseNode true
                }
            }
            steps {
                dir ('bugtracker-frontend') {
                    sh '''
                     npm ci
                     npm test  
                    '''
                }
            }
        }
    }
}
